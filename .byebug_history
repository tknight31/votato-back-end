exit
data
exit
decoded_token(token)
token
current_user
logged_in?
request.body.read
params
exit
params[:vote]
exit
params["suggest"]
params.suggest
params
request.body.read
exit
request.body.read
params
exit
params
exit
params
request.body.read
exit
request.body.read
request.body.hash
request.body.methods
params["vote"]
request.body.vote
request.body.to_json
request.body
request
request.body.to_json
request.body.json
request.body.to_s
request.body.value
request.body.methods
request.body.url
request.body
params
params["vote"]
params[:vote]
@suggestion.vote_up
@suggestion
exit
params[:res_name]
params
exit
@suggestion.save
@suggestion = Suggestion.new(username: current_user[:username], res_id: params[:res_id], vote_up: 0, vote_down: 0)
Suggestion.username="makeuprandomname"
@suggestion = _
Suggestion.new(username: current_user[:username], res_id: params[:res_id])
current_user[:username]
current_user
@suggestion
params
exit
all_suggestions
exit
@suggestion
exit
 JWT.decode(token, "beefysteak", true, {:algorithm =>'HS256'})
decoded_token(token)
 JWT.decode(token, "beefysteak")
JWT.decode(token, "beefysteak", {:algorithm => 'HS256'})
JWT.decode(token, "beefysteak",true,{:algorithm =>'HS256'})
JWT.decode(token, "beefysteak",true)
decoded_token(token)
token
clear
.clear
User.last
User.first
token
decoded_token(token)
JWT.decode(token, "beefysteak")
JWT.decode(token, "beefysteak", algo = 'HS256')
JWT.decode(token, "beefysteak", algorithm = 'HS256')
JWT.decode(token, "beefysteak")
decoded_token(token)
token
exit
request.headers["Authorization"]
request.headers.Authorization
request.headers
request.body
params
exit
current_user
@suggestion
suggestion
params
exit
@suggestion
params[user_id]
params[:res_id]
params
exit
@suggestion
params
exit
body
params[:res_id]
res_id
params
exit
User.all
exit
User
user
users
User
exit
lat
lon
exit
lonlat
exit
lonlat.dig('results')[0].dig('geometry').dig('location').dig('lng')
lonlat.dig('results')[0].dig('geometry').dig('location').dig('lat')
results[0].dig('geometry').dig('location').dig('lat')
firstKey[0].dig('geometry').dig('location').dig('lat')
firstKey[0].dig('geometry').dig('location')[:lat]
fistKey[0].dig('geometry')
fistKey[0].dig('geometry').dig('location')
fistKey[0].dig('geometry').dig('location').dig('lat')
fistKey[0].dig('geometry').dig('location')[:lat]
firstKey[0].dig('geometry').dig('location')
firstKey[0].dig('geometry')
firstKey[0]
firstKey[1]
firstKey[0]
firstKey
params
firstKey["geometry"]
firstKey
firstKey.dig('geometry')
secondKey = firstKey.dig('geometry')
firstKey
lonlat
secondKey
secondKey = lonlat.dig('location')
secondKey = lonlat.dig('geometry')
firstKey
firstKey = lonlat.dig('results')
lonlat.dig('results', 'geometry')
lonlat.dig('results')
results
lonlat
result
result = lonlat[:results]
lonlat.results
results[:address_components]
lonlat
geourl
lonlat
lonlat[:address_components]
lonlat
results
lonlat[:results]
lonlat
lonat
lonlat["results"]["geometry"]["location"]["lat"]
lonlat.results.geometry.location.lat
results.geometry.location.lat
lonlat
exit
params[:search]
params
exit
params[:search]
params[:search
params
exit
params
exit
params
exit
params
exit
params.permitted?
permitted
params
exit
url ="https://developers.zomato.com/api/v2.1/search?q="+term+"&lat=40.705253&lon=-74.014070"
url
url = 'https://developers.zomato.com/api/v2.1/search?q=#{term}&lat=40.705253&lon=-74.014070'
term= params["search"]
term= params["searcg"]
params["search"]
parmas
exit
params["search"]
params.search
params
request.body
request
params
exit
